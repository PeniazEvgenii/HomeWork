package home_work_1;

public class Priority {
    public static void main(String[] args) {
        int a = 2;
        int b = 8;

        int exp1 = 5 + 2 / 8; // exp1 = 5. Первой выполняется операция деление, результат которой 0. Затем сложение 5 + 0.

        int exp2 = (5 + 2)/8; // exp2 = 0. Первым выполняется сложение в скобках, результат которого 7. Затем деление 7 / 8.

        int exp3 = (5 + a++) / 8; // exp3 = 0. Первым выполняется сложение в скобках (5+a) = 7. Затем значение переменной a увеличивается на 1. Далее деление 7 / 8.

        a = 2; // В выражении выше мы увеличили значение a на 1. Но это не повлияло на результат.

        int exp4 = (5 + a++) / --b;
        /*
        * exp4 = 10. Первым выполняется сложение в скобках (5+a) = 7. Затем значение переменной a увеличивается на 1.
        * Затем значение переменной b уменьшается на 1 (8 - 1 = 7). Далее деление 7 / 7.
        */

        b = 8;
        a = 2;

        int exp5 = (5 * 2 >> a++) / --b;
        /*
        * exp5 = 0; Сначало выполняются операции в скобках. Первым умножение (5 * 2 = 10). Далее переводится 10 в число
        * двоичной системы (0b00001010). Далее выполняется операция сдвига вправо на величину а байт (a = 2).
        * Получим 0b00000010 и переводим в число десятичной системы. Будет 2. Затем значение переменной a увеличивается на 1.
        * Значение переменной b уменьшается на 1 (8 - 1 = 7). Далее деление 2 / 7.
        */

        b = 8;
        a = 2;

        int exp6 = (5 + 7 > 20 ? 68 : 22 * 2 >> a++) / --b;
        /*
        * exp6 = 1; Сначало выполняются операции в скобках. В скобках расположен тернарный оператор. Результат условия - false,
        * значит выполняется Выражение 2. Выполняем умножение 22 * 2 = 44. Далее переводится 44 в число двоичной системы (0b00101100). Далее выполняется операция
        * сдвиг вправо на величину а байт. Получим 0b00001011 и переводим в число десятичной системы. Будет 11. Затем значение переменной a увеличивается на 1.
        *  Затем значение переменной b уменьшается на 1 (8 - 1 = 7). Далее выполняем деление 11 / 7.
        */

        //int exp7 = (5 + 7 > 20 ? 68 >= 68 : 22 * 2 >> a++) / --b;
        /*
        * В exp7 получили ошибку. В числителе расположен тернарный оператор. Выражение 1 (68 >= 68) имеет тип данных boolean,
        * Выражение 2 (22 * 2 >> a++) - int. Такой исходный код не будет компилироваться несмотря на то, что результат условия false.
        */

        boolean exp8 = 6 - 2 > 3 && 12 * 12 <= 119;
        /*
        * результат false. Это логический оператор И. Сначала выполняем операции в левом операнде. Выполняем вычитание 6 - 2 = 4.
        * Далее сравниваем 4 > 3. Результат true. Затем  выполняем операции в правом операнде. Умножаем 12 * 12 = 144. Сравниваем 144 <= 119.
        * Результат false. Результат true будет только при условии наличия двух операндов true.
        */

        boolean exp9 = true && false; // результат false. Это логический оператор И. Сначала проверяется левый операнд. Он true. Затем проверяется правый. Он false.

        System.out.println("Результат выражения 1: " + exp1);
        System.out.println("Результат выражения 2: " + exp2);
        System.out.println("Результат выражения 3: " + exp3);
        System.out.println("Результат выражения 4: " + exp4);
        System.out.println("Результат выражения 5: " + exp5);
        System.out.println("Результат выражения 6: " + exp6);
        System.out.println("Результат выражения 8: " + exp8);
        System.out.println("Результат выражения 9: " + exp9);
    }
}
